# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pyqt_weather_app.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import json


# API 
url = "https://community-open-weather-map.p.rapidapi.com/weather"


# my RapidAPI credentials for Open-Weather's API
headers = {
    'x-rapidapi-host': "community-open-weather-map.p.rapidapi.com",
    'x-rapidapi-key': "f51bCvoKijmshiTNqux0PbeIpalLp1NynqDjsngk4K3TgypbZ3"
    }






class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 380)
        MainWindow.setMinimumSize(QtCore.QSize(600, 380))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.weatherButton = QtWidgets.QPushButton(self.centralwidget)
        self.weatherButton.setGeometry(QtCore.QRect(480, 30, 93, 31))
        self.weatherButton.setObjectName("weatherButton")
        self.weatherButton.clicked.connect(self.clickMethod)

        self.entryLabel = QtWidgets.QLabel(self.centralwidget)
        self.entryLabel.setGeometry(QtCore.QRect(30, 30, 161, 31))
        self.entryLabel.setObjectName("entryLabel")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 30, 271, 31))
        self.lineEdit.setObjectName("lineEdit")
        
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 26))
        self.menubar.setObjectName("menubar")
        
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setTitle("")
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())

        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(16)
        self.lbl0 = QtWidgets.QLabel(self.centralwidget)
        self.lbl0.setGeometry(QtCore.QRect(150, 110, 400,25))
        self.lbl0.setFont(font)
        self.lbl0.setObjectName("lbl0")
        self.lbl1 = QtWidgets.QLabel(self.centralwidget)
        self.lbl1.setGeometry(QtCore.QRect(150, 150, 400, 25))
        self.lbl1.setFont(font)
        self.lbl1.setObjectName("lbl1")
        self.lbl2 = QtWidgets.QLabel(self.centralwidget)
        self.lbl2.setGeometry(QtCore.QRect(150, 190, 400, 25))
        self.lbl2.setFont(font)
        self.lbl2.setObjectName("lbl2")
        self.lbl3 = QtWidgets.QLabel(self.centralwidget)
        self.lbl3.setGeometry(QtCore.QRect(150, 230, 400, 25))
        self.lbl3.setFont(font)
        self.lbl3.setObjectName("lbl3")
        self.lbl4 = QtWidgets.QLabel(self.centralwidget)
        self.lbl4.setGeometry(QtCore.QRect(150, 270, 400, 25))
        self.lbl4.setFont(font)
        self.lbl4.setObjectName("lbl4")

        self.retranslateUi(MainWindow)
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "WeatherApp"))
        self.weatherButton.setText(_translate("MainWindow", "Get Weather"))
        self.entryLabel.setText(_translate("MainWindow", "Enter Location (City, State):"))


    def clickMethod(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        location = self.lineEdit.text()
        weather = self.fetch_weather(location)
        print(weather)
        self.lbl0.setText(_translate("MainWindow", "{}".format(weather['weather'][0]['description'])))
        self.lbl1.setText(_translate("MainWindow", "Temperature: {}{}F".format(weather['main']['temp'], chr(176))))
        self.lbl2.setText(_translate("MainWindow", "Feels like: {}{}F".format(weather['main']['feels_like'], chr(176))))
        self.lbl3.setText(_translate("MainWindow", "Humidity: {}%".format(weather['main']['humidity'])))
        self.lbl4.setText(_translate("MainWindow", "Wind: {} mph {}".format(weather['wind']['speed'], self.directions(weather['wind']['deg']))))
        


    def fetch_weather(self, city_state): 
        querystring = {"units":"imperial","q":{city_state}}
        response = requests.request("GET", url, headers=headers, params=querystring)
        weather_data = json.loads(response.text)
        return weather_data

    def directions(self, degree_str):
        deg = int(degree_str)
        if (348.75 < deg or degree_str <= 11.25):
            return "N"
        elif (11.25 < deg <= 33.75):
            return "NNE"
        elif (33.75 < deg <= 56.25):
            return "NE"
        elif (56.25 < deg <= 78.75):
            return "ENE"
        elif (78.75 < deg <= 101.25):
            return "E"
        elif (101.25 < deg <= 123.75):
            return "ESE"
        elif (123.75 < deg <= 146.25):
            return "SE"
        elif (146.25 < deg <= 168.75):
            return "SSE"
        elif (168.75 < deg <= 191.25):
            return "S"
        elif (191.25 < deg <= 213.75):
            return "SSW"
        elif (213.75 < deg <= 236.25):
            return "SW"
        elif (236.25 < deg <= 259.75):
            return("WSW")
        elif (258.75 < deg <= 281.25):
            return "W"
        elif (281.25 < deg <= 303.75):
            return "WNW"
        elif (303.75 < deg <= 326.25):
            return "NW"
        elif (326.25 < deg <= 348.75):
            return "NNW"
        else:
            return "N/A"



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
